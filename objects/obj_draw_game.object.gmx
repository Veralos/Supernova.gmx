<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(vk_escape)) {
    audio_stop_all();
    if (room == rm_title)
        game_end();
    else if (instance_number(obj_control &gt; 0)) {
        audio_play_sound(snd_leave, 0, false);
        room_goto(rm_space);
    }
    else {
        room_goto(rm_title);
        audio_play_sound(snd_cancel, 0, false);
    }
}

if (keyboard_check_pressed(vk_f4))
    window_set_fullscreen(!window_get_fullscreen());
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(game_surface);

if (instance_number(obj_control) &gt; 0) {
    view_enabled = true;
    view_xview[0] = 0;
    view_yview[0] = 0;
    view_xport[0] = 0;
    view_yport[0] = 0;
    view_wview[0] = room_width;
    view_hview[0] = room_height;
    view_wport[0] = room_width;
    view_hport[0] = room_height;
    view_visible[0] = true;
}

game_surface = surface_create(view_wview[0], view_hview[0]);
view_surface_id[0] = game_surface;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>application_surface_draw_enable(false);
game_surface = -1;
room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(game_surface))
    draw_surface_stretched(game_surface, 0, 0, window_get_width(), window_get_height());
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !surface_exists(game_surface) {
    game_surface = surface_create(view_wview[0], view_hview[0]);
    view_surface_id[0] = game_surface;
}

/*if (!surface_exists(global.star_surface)) {
    global.star_surface = surface_create(512, 288);
    
    for (var i = 0; i &lt; 500; i++) {
        var star_x = random(512);
        var star_y = random(288);
        var star_alpha = 0.5 + random(0.5);
        surface_set_target(global.star_surface);
        draw_sprite_ext(spr_star, 0, star_x, star_y, 1, 1, 0, c_white, star_alpha);
        surface_reset_target();
    }
    surface_save(global.star_surface, "star1.png");
}

if (!surface_exists(global.star_surface2)) {
    global.star_surface2 = surface_create(512, 288);
    
    for (var i = 0; i &lt; 500; i++) {
        var star_x = random(512);
        var star_y = random(288);
        var star_alpha = 0.5 + random(0.5);
        surface_set_target(global.star_surface2);
        draw_sprite_ext(spr_star, 0, star_x, star_y, 1, 1, 0, c_white, star_alpha);
        surface_reset_target();
    }
    surface_save(global.star_surface, "star2.png");
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
