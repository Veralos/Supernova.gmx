<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ship</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>angle = 90;
spd = 0;
burn = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.supernova) {
    audio_play_sound(snd_ship_die, 0, false);
    obj_space_control.alarm[0] = 60;
    
    var parts = 10 + random(10);
    for (var i = 0; i &lt; parts; i++)
        instance_create(x, y, obj_ship_part);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check(vk_left))
    angle += 1 * spd;
if (keyboard_check(vk_right))
    angle -= 1 * spd;
    
if (angle &lt; 0)
    angle += 360;
if (angle &gt; 360)
    angle -= 360;

if (keyboard_check_pressed(vk_up))
    audio_play_sound(snd_ship_move, 0, false);
    
if (keyboard_check(vk_up)) {
    if (!audio_is_playing(snd_ship_move2))
        audio_play_sound(snd_ship_move2, 0, false);
    var trail = instance_create(x, y, obj_trail);
    trail.image_angle = angle - 90;
    spd += 0.5;
}
    
spd -= 0.25;

if (spd &gt; 6)
    spd = 6;
if (spd &lt; 0)
    spd = 0;
    
move_x = round(lengthdir_x(spd, angle));
move_y = round(lengthdir_y(spd, angle)); 

x += move_x;
y += move_y;

if (distance_to_point(room_width / 2, room_height / 2) &lt; 1500 - global.shield_level * 500 - 16) {
    if (!audio_is_playing(snd_burn)) {
        var sound = audio_play_sound(snd_burn, 0, false);
        //audio_sound_pitch(sound, 1 + 0.5 * (burn / 60));
    }
    burn++;
    if (burn &gt; 60)
        instance_destroy();
}
else
    burn = 0;
    
if (distance_to_point(room_width / 2, room_height / 2) &gt; 3000)
    instance_destroy();

view_xview[0] = x - view_wview[0] / 2;
view_yview[0] = y - view_hview[0] / 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var draw_angle = angle - 90;
var draw_scale = 1;

if (burn mod 10 &gt; 5)
    d3d_set_fog(true, c_white, 0, 0);

draw_sprite_ext(spr_ship_poles, 0, x, y, draw_scale, draw_scale, draw_angle, c_white, 1);
draw_sprite_ext(spr_ship_back, 0, x, y, draw_scale, draw_scale, draw_angle, c_white, 1);

draw_sprite_ext(spr_drone, 0, x, y, draw_scale, draw_scale, draw_angle, c_white, 1);
draw_sprite_ext(spr_drone_treads, 0, x, y, draw_scale, draw_scale, draw_angle, c_white, 1);

draw_sprite_ext(spr_ship, 0, x, y, draw_scale, draw_scale, draw_angle, c_white, 1);
draw_sprite_ext(spr_ship_platform, 0, x, y, draw_scale, draw_scale, draw_angle, c_white, 1);

d3d_set_fog(false, c_white, 0, 0);

draw_set_color(make_color_rgb(0, 255, 255));
for (var i = 0; i &lt; global.shield_level; i++) {
    draw_circle(x - 1 + lengthdir_x(3, angle + 180), y + lengthdir_y(3, angle + 180), 15 + 2 * i, true);
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
