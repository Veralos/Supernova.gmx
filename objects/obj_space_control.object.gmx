<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

global.supernova = false;
nova_radius = 0;

global.ore_count = 0;
global.shield_level = 0;
global.planet = -1;

global.text1 = "";
global.text2 = "";
global.text_alpha = 0;

upgrade_alpha = 0;
upgrade_flash = 0;

land_list = ds_list_create();

ds_list_add(land_list, rm_land1);
ds_list_add(land_list, rm_land2);
ds_list_add(land_list, rm_land3);
ds_list_add(land_list, rm_land4);
ds_list_add(land_list, rm_land5);
ds_list_add(land_list, rm_land6);
ds_list_add(land_list, rm_land7);
ds_list_add(land_list, rm_land8);
ds_list_add(land_list, rm_land9);
ds_list_add(land_list, rm_land10);
ds_list_add(land_list, rm_land11);
ds_list_add(land_list, rm_land12);
ds_list_add(land_list, rm_land13);
ds_list_add(land_list, rm_land14);
ds_list_add(land_list, rm_land15);
ds_list_add(land_list, rm_land16);
ds_list_add(land_list, rm_land17);
ds_list_add(land_list, rm_land18);
ds_list_add(land_list, rm_land19);
ds_list_add(land_list, rm_land20);

easy_list = ds_list_create();

ds_list_add(easy_list, rm_easy1);
ds_list_add(easy_list, rm_easy2);
ds_list_add(easy_list, rm_easy3);
ds_list_add(easy_list, rm_easy4);
ds_list_add(easy_list, rm_easy5);
ds_list_add(easy_list, rm_easy6);
ds_list_add(easy_list, rm_easy7);
ds_list_add(easy_list, rm_easy8);
ds_list_add(easy_list, rm_easy9);
ds_list_add(easy_list, rm_easy10);
ds_list_add(easy_list, rm_easy11);
ds_list_add(easy_list, rm_easy12);
ds_list_add(easy_list, rm_easy13);
ds_list_add(easy_list, rm_easy14);
ds_list_add(easy_list, rm_easy15);
ds_list_add(easy_list, rm_easy16);
ds_list_add(easy_list, rm_easy17);
ds_list_add(easy_list, rm_easy18);
ds_list_add(easy_list, rm_easy19);
ds_list_add(easy_list, rm_easy20);
ds_list_add(easy_list, rm_easy21);
ds_list_add(easy_list, rm_easy22);
ds_list_add(easy_list, rm_easy23);
ds_list_add(easy_list, rm_easy24);
ds_list_add(easy_list, rm_easy25);
ds_list_add(easy_list, rm_easy26);
ds_list_add(easy_list, rm_easy27);
ds_list_add(easy_list, rm_easy28);
ds_list_add(easy_list, rm_easy29);
ds_list_add(easy_list, rm_easy30);

hard_list = ds_list_create();

ds_list_add(hard_list, rm_hard1);
ds_list_add(hard_list, rm_hard2);
ds_list_add(hard_list, rm_hard3);
ds_list_add(hard_list, rm_hard4);
ds_list_add(hard_list, rm_hard5);
ds_list_add(hard_list, rm_hard6);
ds_list_add(hard_list, rm_hard7);
ds_list_add(hard_list, rm_hard8);
ds_list_add(hard_list, rm_hard9);
ds_list_add(hard_list, rm_hard10);
ds_list_add(hard_list, rm_hard11);
ds_list_add(hard_list, rm_hard12);
ds_list_add(hard_list, rm_hard13);
ds_list_add(hard_list, rm_hard14);
ds_list_add(hard_list, rm_hard15);
ds_list_add(hard_list, rm_hard16);
ds_list_add(hard_list, rm_hard17);
ds_list_add(hard_list, rm_hard18);
ds_list_add(hard_list, rm_hard19);
ds_list_add(hard_list, rm_hard20);
ds_list_add(hard_list, rm_hard21);
ds_list_add(hard_list, rm_hard22);
ds_list_add(hard_list, rm_hard23);
ds_list_add(hard_list, rm_hard24);
ds_list_add(hard_list, rm_hard25);
ds_list_add(hard_list, rm_hard26);
ds_list_add(hard_list, rm_hard27);
ds_list_add(hard_list, rm_hard28);
ds_list_add(hard_list, rm_hard29);
ds_list_add(hard_list, rm_hard30);

music_list = ds_list_create();

ds_list_add(music_list, snd_planet_music1);
ds_list_add(music_list, snd_planet_music2);
ds_list_add(music_list, snd_planet_music3);

ore_needed_list = ds_list_create();
var ore_needed = 0;
var hard_chance = 0;

for (var radius = 1750; radius &gt;= 750; radius -= 500) {
    var base_angle = random(360);
    for (var angle = base_angle; angle &lt;= base_angle + 270; angle += 90) {
        var rad = radius - 50 + random(100);
        var ang = angle - 25 + random(50);
        ore_needed += scr_generate_planet(room_width / 2 + lengthdir_x(rad, ang), room_height / 2 + lengthdir_y(rad, ang), hard_chance);
    }
    ds_list_add(ore_needed_list, ore_needed);
    hard_chance += 0.5;
}
ds_list_add(ore_needed_list, ore_needed);

instance_create(room_width / 2, room_height / 2, obj_star);

global.spawn_x = room_width / 2;
global.spawn_y = room_height / 2 + 2000;

instance_create(global.spawn_x, global.spawn_y, obj_ship);

instance_create(0, 0, obj_space_background);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(global.spawn_x, global.spawn_y, obj_ship);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.text_alpha -= 0.1;
if (global.text_alpha &lt; 0)
    global.text_alpha = 0;
    
upgrade_alpha -= 0.1;
if (upgrade_alpha &lt; 0)
    upgrade_alpha = 0;
  
upgrade_flash++
if (upgrade_flash &gt; 60)
    upgrade_flash = 0;
    
if (global.supernova) {
    nova_radius += 20;
    if (nova_radius &gt; 1000)
        room_goto(rm_end);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_sound(snd_planet_music1);
audio_stop_sound(snd_planet_music2);
audio_stop_sound(snd_planet_music3);

audio_play_sound(snd_space_music, 1, true);

if (global.shield_level &lt; 3 &amp;&amp; global.ore_count &gt;= ds_list_find_value(ore_needed_list, global.shield_level)) {
    audio_play_sound(snd_upgrade, 0, false);
    upgrade_alpha = 15;
    global.shield_level++;
}

if (global.supernova) {
    global.supernova = false;
    nova_radius = 0;
    instance_create(room_width / 2, room_height / 2, obj_ship);
    global.spawn_x = room_width / 2;
    global.spawn_y = room_height / 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(spr_shield, 0, view_xview[0] + 8, view_yview[0] + 8, 2, 2, 0, c_white, 1);
draw_sprite_ext(spr_ore, 0, view_xview[0] + 48, view_yview[0] + 8, 2, 2, 0, c_white, 1);

draw_set_font(fnt_space);
draw_set_halign(fa_left);
draw_set_valign(fa_middle);

draw_set_color(c_white);

draw_text(view_xview[0] + 28, view_yview[0] + 16, global.shield_level);
draw_text(view_xview[0] + 68, view_yview[0] + 16, string(global.ore_count) + "/" + string(ds_list_find_value(ore_needed_list, global.shield_level)));

global.map_x = view_xview[0] + view_wview[0] - 8 - 32;
global.map_y = view_yview[0] + 8 + 32;

draw_set_color(c_black);
draw_circle(global.map_x, global.map_y, 32, false);
draw_set_color(c_white);
draw_circle(global.map_x, global.map_y, 32, true);

var system_radius = 2000;

draw_set_alpha(0.5);
draw_set_color(c_yellow);

draw_circle(global.map_x, global.map_y, 500 / system_radius * 32, true);
draw_circle(global.map_x, global.map_y, 1000 / system_radius * 32, true);
draw_circle(global.map_x, global.map_y, 1500 / system_radius * 32, true);

draw_set_alpha(1);
draw_set_color(c_white);

with (obj_planet) {
    if (scr_planet_complete(self))
        draw_set_color(make_color_rgb(0, 255, 255));
    else
        draw_set_color(c_white);
    draw_circle(global.map_x + ((x - room_width / 2) / system_radius) * 32, global.map_y + ((y - room_height / 2) / system_radius) * 32, 1.5, false);
}

draw_set_color(c_yellow);

draw_circle(global.map_x, global.map_y, 3, false);
  
if (instance_number(obj_ship) &gt; 0) {
    draw_set_color(make_color_rgb(255, 0, 255));
    
    var player_distance = point_distance(room_width / 2, room_height / 2, obj_ship.x, obj_ship.y);
    var player_direction = point_direction(room_width / 2, room_height / 2, obj_ship.x, obj_ship.y);
    
    if (player_distance &lt; system_radius)
        draw_circle(global.map_x + ((obj_ship.x - room_width / 2) / system_radius) * 32, global.map_y + ((obj_ship.y - room_height / 2) / system_radius) * 32, 1.5, false);
    else
        draw_circle(global.map_x + lengthdir_x(32, player_direction), global.map_y + lengthdir_y(32, player_direction), 1.5, false);
}

draw_set_halign(fa_center);
draw_set_color(c_white);
draw_set_alpha(global.text_alpha);

draw_text(view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 4, global.text1);
draw_text(view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] * (3 / 4), global.text2);

if (upgrade_flash mod 15 &gt; 5) {
    //draw_set_color(make_color_rgb(0, 255, 255));
    draw_set_alpha(upgrade_alpha);
    draw_set_font(fnt_menu);
    
    draw_text(view_xview[0] + view_wview[0] / 2, view_yview[0] + view_hview[0] / 2, "Heat shield upgraded!");
}

draw_set_alpha(1);

if (global.supernova) {
    if (nova_radius &lt; 500)
        draw_set_color(merge_color(make_color_rgb(255, 255, 0), c_white, nova_radius / 500))
    else
        draw_set_color(c_white);
    draw_circle(room_width / 2, room_height / 2, nova_radius, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
